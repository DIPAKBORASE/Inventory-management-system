const express = require('express');
const {
	getRequest,
	getRequests,
	changeRequestStatus,
	// deleteRequest,
	addRequest,
	updateRequest,
	addRequestForService,
	getRequestByHash,
	acknowledgeRequestDelivery,
	getKPIs,
	assignedToSupport,
	markRequestAsDispatch,
	ratingRemark,
	getServiceRequestExport,
	getProcurementExport,
	approveRequestByAdmin,
} = require('../controllers/request');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');

const requestProcurementValidator = require('../validations/request_procurement_validator');
const requestSystemRequestValidator = require('../validations/request_system_request_validator');

router
	.post(
		'/getRequest',
		requestProcurementValidator.idValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SUPPORT,
			process.env.SYSTEM_ADMIN
		),
		getRequest
	)
	.post(
		'/approveRequestByAdmin',
		requestProcurementValidator.idValid(),
		protect,
		authorize(
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		approveRequestByAdmin
	)
	.get('/details/:id/:hash', getRequestByHash)
	.post(
		'/getRequests',
		requestProcurementValidator.requestTypeValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SUPPORT,
			process.env.SYSTEM_ADMIN
		),
		getRequests
	)

	.post(
		'/changeRequestStatus',
		requestProcurementValidator.updateValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.IT,
			process.env.ADMIN,
			process.env.SYSTEM_ADMIN
		),
		changeRequestStatus
	)
	.post(
		'/markRequestAsDispatch',
		requestProcurementValidator.idValid(),
		protect,
		authorize(
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		markRequestAsDispatch
	)
	.post(
		'/raiseProcurementRequest',
		requestProcurementValidator.saveValid(),
		protect,
		authorize(process.env.REQUESTER),
		addRequest
	)
	.post(
		'/updateRaiseProcurementRequest',
		requestProcurementValidator.updateValid(),
		protect,
		authorize(
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		updateRequest
	)
	.post(
		'/raiseServiceRequest',
		requestSystemRequestValidator.saveValid(),
		protect,
		authorize(process.env.REQUESTER),
		addRequestForService
	)
	.post(
		'/acknowledgeRequestDelivery',
		requestSystemRequestValidator.idValid(),
		protect,
		authorize(process.env.REQUESTER),
		acknowledgeRequestDelivery
	)
	.post(
		'/ratingRemark',
		requestSystemRequestValidator.idValid(),
		protect,
		authorize(process.env.REQUESTER),
		ratingRemark
	)
	.post(
		'/getKPIs',
		requestProcurementValidator.requestTypeValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.SUPPORT,
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		getKPIs
	)
	.post(
		'/assignedToSupport',
		// requestProcurementValidator.requestTypeValid(),
		protect,
		authorize(
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		assignedToSupport
	)
	.post(
		'/getServiceRequestExport',
		// requestProcurementValidator.requestTypeValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.SUPPORT,
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		getServiceRequestExport
	)
	.post(
		'/getProcurementExport',
		// requestProcurementValidator.requestTypeValid(),
		protect,
		authorize(
			process.env.REQUESTER,
			process.env.SUPPORT,
			process.env.IT,
			process.env.ADMIN,
			process.env.IT_SYSTEM_ADMIN,
			process.env.ADMIN_SYSTEM_ADMIN,
			process.env.SYSTEM_ADMIN
		),
		getProcurementExport
	);

// requestTypeValid
module.exports = router;
